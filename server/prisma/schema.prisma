generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  active
  inactive
  suspended
}

enum AppointmentStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum NotificationType {
  appointment
  reminder
  system
  other
}

enum SeverityLevel {
  low
  medium
  high
}

// Models
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("roles")
}

model User {
  id                Int           @id @default(autoincrement())
  roleId           Int           @map("role_id")
  email            String        @unique
  passwordHash     String        @map("password_hash")
  firstName        String        @map("first_name")
  lastName         String        @map("last_name")
  phone            String?
  address          Json?
  profileImage     String?       @map("profile_image")
  status           UserStatus    @default(active)
  twoFactorEnabled Boolean       @default(false) @map("two_factor_enabled")
  twoFactorSecret  String?       @map("two_factor_secret")
  lastLoginAt      DateTime?     @map("last_login_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  
  // Relations
  role             Role          @relation(fields: [roleId], references: [id])
  doctor           Doctor?
  patient          Patient?
  admin            Admin?
  notifications    Notification[]
  preferences      NotificationPreference?
  auditLogs       AuditLog[]
  createdAppointments Appointment[] @relation("CreatedBy")
  cancelledAppointments Appointment[] @relation("CancelledBy")

  @@map("users")
}

model Admin {
  id          Int      @id
  adminType   String   @map("admin_type")
  permissions Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [id], references: [id])

  @@map("admins")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  location    String?
  contactNumber String? @map("contact_number")
  headDoctorId Int?    @map("head_doctor_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  doctors     Doctor[]

  @@map("departments")
}

model Doctor {
  id              Int       @id
  departmentId    Int       @map("department_id")
  specializations String[]
  qualifications  Json
  experienceYears Int?      @map("experience_years")
  consultationFee Decimal   @map("consultation_fee")
  about          String?
  availableOnline Boolean   @default(false) @map("available_for_online")
  averageRating  Decimal?  @map("average_rating")
  reviewCount    Int       @default(0) @map("review_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User      @relation(fields: [id], references: [id])
  department     Department @relation(fields: [departmentId], references: [id])
  schedules      DoctorSchedule[]
  unavailability DoctorUnavailability[]
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  reviews        Review[]

  @@map("doctors")
}

model Patient {
  id            Int       @id
  dateOfBirth   DateTime  @map("date_of_birth")
  bloodGroup    String?   @map("blood_group")
  height        Decimal?
  weight        Decimal?
  medicalHistory Json     @default("{}") @map("medical_history")
  insuranceInfo Json     @default("{}") @map("insurance_info")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user          User      @relation(fields: [id], references: [id])
  allergies     PatientAllergy[]
  emergencyContacts EmergencyContact[]
  appointments  Appointment[]
  medicalRecords MedicalRecord[]
  reviews       Review[]

  @@map("patients")
}

model PatientAllergy {
  id          Int           @id @default(autoincrement())
  patientId   Int          @map("patient_id")
  name        String       @map("allergy_name")
  severity    SeverityLevel
  diagnosedDate DateTime?  @map("diagnosed_date")
  notes       String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  patient     Patient      @relation(fields: [patientId], references: [id])

  @@map("patient_allergies")
}

model EmergencyContact {
  id          Int      @id @default(autoincrement())
  patientId   Int      @map("patient_id")
  name        String
  relationship String
  phone       String
  email       String?
  address     Json?
  isPrimary   Boolean  @default(false) @map("is_primary")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  patient     Patient  @relation(fields: [patientId], references: [id])

  @@map("emergency_contacts")
}

model DoctorSchedule {
  id          Int      @id @default(autoincrement())
  doctorId    Int      @map("doctor_id")
  dayOfWeek   Int      @map("day_of_week")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  breakStart  DateTime? @map("break_start")
  breakEnd    DateTime? @map("break_end")
  slotDuration Int     @default(30) @map("slot_duration")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  doctor      Doctor   @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, dayOfWeek, startTime, endTime])
  @@map("doctor_schedules")
}

model DoctorUnavailability {
  id            Int      @id @default(autoincrement())
  doctorId      Int      @map("doctor_id")
  startDateTime DateTime @map("start_datetime")
  endDateTime   DateTime @map("end_datetime")
  reason        String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  doctor        Doctor   @relation(fields: [doctorId], references: [id])

  @@map("doctor_unavailability")
}

model Appointment {
  id                Int              @id @default(autoincrement())
  patientId         Int              @map("patient_id")
  doctorId          Int              @map("doctor_id")
  appointmentDateTime DateTime       @map("appointment_datetime")
  duration          Int              @default(30)
  type             String
  status           AppointmentStatus @default(scheduled)
  reason           String?
  symptoms         String[]
  notes            String?
  cancellationReason String?        @map("cancellation_reason")
  cancelledById    Int?             @map("cancelled_by")
  createdById      Int              @map("created_by")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  patient          Patient          @relation(fields: [patientId], references: [id])
  doctor           Doctor           @relation(fields: [doctorId], references: [id])
  cancelledBy      User?            @relation("CancelledBy", fields: [cancelledById], references: [id])
  createdBy        User             @relation("CreatedBy", fields: [createdById], references: [id])
  medicalRecord    MedicalRecord?
  review           Review?

  @@map("appointments")
}

model MedicalRecord {
  id              Int       @id @default(autoincrement())
  appointmentId   Int       @unique @map("appointment_id")
  patientId       Int       @map("patient_id")
  doctorId        Int       @map("doctor_id")
  diagnosis       String[]
  symptoms        String[]
  prescription    Json
  testResults     Json      @map("test_results")
  notes           String?
  followUpDate    DateTime? @map("follow_up_date")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  patient         Patient    @relation(fields: [patientId], references: [id])
  doctor          Doctor     @relation(fields: [doctorId], references: [id])

  @@map("medical_records")
}

model Notification {
  id        Int             @id @default(autoincrement())
  userId    Int             @map("user_id")
  title     String
  message   String
  type      NotificationType
  data      Json            @default("{}")
  isRead    Boolean         @default(false) @map("is_read")
  readAt    DateTime?       @map("read_at")
  createdAt DateTime        @default(now()) @map("created_at")
  user      User            @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model NotificationPreference {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  emailEnabled   Boolean  @default(true) @map("email_enabled")
  smsEnabled     Boolean  @default(true) @map("sms_enabled")
  pushEnabled    Boolean  @default(true) @map("push_enabled")
  reminderTiming Int      @default(24) @map("reminder_timing")
  preferences    Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  user           User     @relation(fields: [userId], references: [id])

  @@map("notification_preferences")
}

model Review {
  id            Int       @id @default(autoincrement())
  appointmentId Int       @unique @map("appointment_id")
  patientId     Int       @map("patient_id")
  doctorId      Int       @map("doctor_id")
  rating        Decimal
  comment       String?
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  isPublic      Boolean   @default(true) @map("is_public")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patient       Patient    @relation(fields: [patientId], references: [id])
  doctor        Doctor     @relation(fields: [doctorId], references: [id])

  @@map("reviews")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  action    String
  tableName String   @map("table_name")
  recordId  Int?     @map("record_id")
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
} 